{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f7be3303-bdc5-4004-90f4-3e41b81f04b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import dash\n",
    "import pandas as pd\n",
    "from dash import dcc, html\n",
    "import plotly.express as px\n",
    "import ipywidgets as widgets\n",
    "import plotly.graph_objects as go\n",
    "from IPython.display import display\n",
    "from dash.dependencies import Input, Output\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c06fb6fe-d188-44f7-8e13-fb24be96a8ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Carregar o conjunto de dados\n",
    "df = pd.read_excel('Base de Dados.xlsx')\n",
    "\n",
    "# Convertendo a coluna 'Data_Pedido' para o tipo datetime\n",
    "df['Data_Pedido'] = pd.to_datetime(df['Data_Pedido'])\n",
    "\n",
    "# Mapeando os números de mês para nomes de mês\n",
    "nome_mes = {1: 'Janeiro', 2: 'Fevereiro', 3: 'Março', 4: 'Abril', 5: 'Maio', 6: 'Junho', 7: 'Julho', 8: 'Agosto', 9: 'Setembro', 10: 'Outubro', 11: 'Novembro', 12: 'Dezembro'}\n",
    "\n",
    "# Extraindo o mês da coluna 'Data_Pedido' e mapeando para nomes de mês\n",
    "df['Mês'] = df['Data_Pedido'].dt.month.map(nome_mes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "10495543-fc31-4256-acf8-a84a52709d95",
   "metadata": {},
   "outputs": [],
   "source": [
    "#1\n",
    "#________________________________________________________________________________________________________________________________________________________\n",
    "tm = df.groupby('Mês')['Valor_Total_Venda'].sum().reset_index()\n",
    "\n",
    "fig1 = px.line(tm, x=\"Mês\", y=\"Valor_Total_Venda\",\n",
    "               line_shape=\"spline\", render_mode=\"svg\",\n",
    "               title=\"O Total de Vendas por Mês\",\n",
    "               labels={'Mês': 'Mês', 'Valor_Total_Venda': 'Total de Vendas'})\n",
    "\n",
    "#_______________________________________________________________________________________________________________________________________________________\n",
    "fig2 = px.line(df, x=\"Mês\", y=\"Valor_Total_Venda\",\n",
    "              color='Nome_Produto',\n",
    "              line_shape=\"spline\", render_mode=\"svg\",\n",
    "              title=\"Total de Vendida de um produto por Mês\",\n",
    "              hover_name='Nome_Produto',\n",
    "              labels={'Mês': 'Mês', 'Valor_Total_Venda': 'Total de Vendas','Nome_Produto': 'Nome do Produto' })\n",
    "#_______________________________________________________________________________________________________________________________________________________\n",
    "tm = df.groupby('Nome_Representante')['Valor_Total_Venda'].sum().reset_index()\n",
    "\n",
    "fig3 = px.bar(tm, x=\"Nome_Representante\", y=\"Valor_Total_Venda\",\n",
    "              title=\"Total de Vendas por Representante\",\n",
    "              labels={'Nome_Representante': 'Representante', 'Valor_Total_Venda': 'Total de Vendas'})\n",
    "#_______________________________________________________________________________________________________________________________________________________\n",
    "fig4 = px.bar(df, x='Nome_Representante', y='Valor_Total_Venda',\n",
    "             color='Nome_Produto', \n",
    "             title='Total de Vendas de um produto por Representante',\n",
    "             hover_name='Nome_Produto',\n",
    "             labels={'Nome_Representante': 'Representante', 'Valor_Total_Venda': 'Total de Vendas','Nome_Produto':'Nome do Produto'})\n",
    "\n",
    "fig4.update_yaxes(showticklabels=False)\n",
    "fig4.update_traces(marker_line_width=0)\n",
    "#_______________________________________________________________________________________________________________________________________________________\n",
    "tp = df.groupby('Nome_Produto')['Valor_Total_Venda'].sum().reset_index()\n",
    "\n",
    "# Criando a figura\n",
    "fig5 = go.Figure(data=[go.Table(\n",
    "    header=dict(values=[\"Produto\", \"Total de Vendas\"]),\n",
    "    cells=dict(values=[tp[\"Nome_Produto\"], tp[\"Valor_Total_Venda\"]]))\n",
    "])\n",
    "\n",
    "#________________________________________________________________________________________________________________________________________________________\n",
    "fig6 = px.pie(df, values='Valor_Total_Venda', names='Regional', \n",
    "             title='Total de Vendas por Região',\n",
    "             labels={'Regional': 'Região','Valor_Total_Venda': 'Total de Venda'  })\n",
    "# Ajustando o layout para colocar a legenda ao lado\n",
    "fig6.update_layout(legend=dict(\n",
    "    orientation=\"h\",\n",
    "    yanchor=\"bottom\",\n",
    "    y=1.02,\n",
    "    xanchor=\"right\",\n",
    "    x=1\n",
    "))\n",
    "#________________________________________________________________________________________________________________________________________________________\n",
    "te = df.groupby('Estado_Cliente')['Valor_Total_Venda'].sum().reset_index()\n",
    "\n",
    "# Criando o gráfico de barras com Plotly Express\n",
    "fig7 = px.bar(te, x='Estado_Cliente', y='Valor_Total_Venda',\n",
    "             title='Total de Vendas por Representante',\n",
    "             labels={'Estado_Cliente': 'Estado', 'Valor_Total_Venda': 'Total de Vendas'})\n",
    "#________________________________________________________________________________________________________________________________________________________\n",
    "fig8 = px.bar(df, x='Estado_Cliente', y='Valor_Total_Venda',\n",
    "             color='Nome_Produto', \n",
    "             title='Total de Vendas por Representante',\n",
    "             hover_name='Nome_Produto',\n",
    "             labels={'Estado_Cliente': 'Estado', 'Valor_Total_Venda': 'Total de Vendas','Nome_Produto':'Nome do Produto' })\n",
    "fig8.update_yaxes(showticklabels=False)\n",
    "fig8.update_traces(marker_line_width=0);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "86d1ac53-d057-4cbd-9614-c8ee69753a2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2-\n",
    "#_________________________________________________________________________________________________________________________________________________________\n",
    "# Filtrando os dados para criar os gráficos\n",
    "total_vendas_por_mes = df.groupby('Mês')['Valor_Total_Venda'].sum().reset_index()\n",
    "total_vendas_por_representante = df.groupby('Nome_Representante')['Valor_Total_Venda'].sum().reset_index()\n",
    "total_vendas_por_regional = df.groupby('Cidade_Cliente')['Valor_Total_Venda'].sum().reset_index()\n",
    "\n",
    "# Define the figure for total_vendas_por_mes\n",
    "fig9 = go.Figure(data=[go.Scatter(x=total_vendas_por_mes['Mês'],\n",
    "                                  y=total_vendas_por_mes['Valor_Total_Venda'],\n",
    "                                  mode='lines',\n",
    "                                  name='fig1')],\n",
    "                 layout=go.Layout(title='O Total de Vendas por Mês'))\n",
    "\n",
    "# Define the figure for total_vendas_por_representante\n",
    "fig10 = go.Figure(data=[go.Bar(x=total_vendas_por_representante['Nome_Representante'],\n",
    "                               y=total_vendas_por_representante['Valor_Total_Venda'],\n",
    "                               name='fig2')],\n",
    "                  layout=go.Layout(title='O Total de Vendas por Representante'))\n",
    "\n",
    "# Define the figure for total_vendas_por_regional\n",
    "fig11 = go.Figure(data=[go.Scatter(x=total_vendas_por_regional['Cidade_Cliente'],\n",
    "                                   y=total_vendas_por_regional['Valor_Total_Venda'],\n",
    "                                   mode='lines',\n",
    "                                   fill='tozeroy',\n",
    "                                   name='fig3')],\n",
    "                  layout=go.Layout(title='O Total de Vendas por Região'))\n",
    "\n",
    "# Now, you can directly use these figures in your Dash layout or callbacks\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c0320e15-2612-437e-b3c4-e8cdd47d6758",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8051/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x1c4a819bad0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "app = dash.Dash(__name__)\n",
    "\n",
    "#________________________________________________________________________________________________________________________________________________________\n",
    "\n",
    "# Primeiro layout do aplicativo sem abas\n",
    "layout_sem_abas = html.Div(children=[\n",
    "    html.H1(children='Meu Dashboard Em PythonAnywhere'),\n",
    "    html.Div(children=''' '''),\n",
    "    dcc.Graph(id='total_mes', figure=fig1),\n",
    "    dcc.Graph(id='total_mes_por_produto', figure=fig2),\n",
    "    dcc.Graph(id='Total_Vendas_Representante', figure=fig3),\n",
    "    dcc.Graph(id='Total_Vendas_produto_Representante', figure=fig4),\n",
    "    dcc.Graph(id='Total_Vendas_produto', figure=fig5),\n",
    "    dcc.Graph(id='Total_Vendas_Regiao', figure=fig6),\n",
    "    dcc.Graph(id='Total_Vendas_Estado', figure=fig7),\n",
    "    dcc.Graph(id='Total_Vendas_produto_Estado', figure=fig8)\n",
    "])\n",
    "\n",
    "# Segundo layout do aplicativo com abas\n",
    "layout_com_abas =html.Div([\n",
    "    html.H1(\"Filtrgem Com Seleção De Abas\"),\n",
    "    dcc.Tabs(id='tabs', value='tab-1', children=[\n",
    "        dcc.Tab(label='Mês', value='tab-1'),\n",
    "        dcc.Tab(label='Representante', value='tab-2'),\n",
    "        dcc.Tab(label='Regional', value='tab-3'),\n",
    "    ]),\n",
    "    html.Div(id='tabs-content')\n",
    "])\n",
    "\n",
    "# Callback para atualizar o conteúdo com base na aba selecionada\n",
    "@app.callback(\n",
    "    dash.dependencies.Output('tabs-content', 'children'),\n",
    "    [dash.dependencies.Input('tabs', 'value')]\n",
    ")\n",
    "def render_content(tab):\n",
    "    if tab == 'tab-1':\n",
    "        return dcc.Graph(id='mes', figure=fig9)\n",
    "    elif tab == 'tab-2':\n",
    "        return dcc.Graph(id='representante', figure=fig10)\n",
    "    elif tab == 'tab-3':\n",
    "        return dcc.Graph(id='regiao', figure=fig11)\n",
    "\n",
    "\n",
    "# Layout da aplicação\n",
    "layout_dropdown = html.Div([\n",
    "    html.H1(\"Análise De Vendas Por Estado e Cidade\"),\n",
    "    html.Label('Estado'),\n",
    "    dcc.Dropdown(\n",
    "        id='estado-dropdown',\n",
    "        options=[{'label': estado, 'value': estado} for estado in df['Estado_Cliente'].unique()],\n",
    "        value=df['Estado_Cliente'].unique()[0]  # Valor padrão\n",
    "    ),\n",
    "\n",
    "    html.Label('Cidade'),\n",
    "    dcc.Dropdown(id='cidade-dropdown'),\n",
    "\n",
    "    dcc.Graph(id='sales-graph')\n",
    "])\n",
    "\n",
    "# Callback para atualizar as opções da dropdown de cidade com base no estado selecionado\n",
    "@app.callback(\n",
    "    Output('cidade-dropdown', 'options'),\n",
    "    [Input('estado-dropdown', 'value')]\n",
    ")\n",
    "def update_city_options(selected_state):\n",
    "    cities = df[df['Estado_Cliente'] == selected_state]['Cidade_Cliente'].unique()\n",
    "    return [{'label': city, 'value': city} for city in cities]\n",
    "\n",
    "# Callback para atualizar o gráfico com base no estado e cidade selecionados\n",
    "@app.callback(\n",
    "    Output('sales-graph', 'figure'),\n",
    "    [Input('estado-dropdown', 'value'),\n",
    "     Input('cidade-dropdown', 'value')]\n",
    ")\n",
    "def update_sales_graph(selected_state, selected_city):\n",
    "    filtered_data = df[(df['Estado_Cliente'] == selected_state) & (df['Cidade_Cliente'] == selected_city)]\n",
    "    sales_data = filtered_data.groupby('Mês').agg({'Valor_Total_Venda': 'sum', 'Quantidade_Vendida': 'sum'}).reset_index()\n",
    "    \n",
    "    fig = px.bar(sales_data, x='Mês', y='Valor_Total_Venda', \n",
    "                 hover_data={'Quantidade_Vendida'},\n",
    "                 labels={'Valor_Total_Venda': 'Total de Vendas', 'Quantidade_Vendida': 'Quantidade Vendida'},\n",
    "                 title=f'Quantidade de Vendas por Mês em {selected_city}, {selected_state}')\n",
    "    fig.update_xaxes(title='Mês da Venda')\n",
    "    fig.update_yaxes(title='Valor Total Venda')\n",
    "    return fig\n",
    "\n",
    "# Layout principal combinando os dois layouts\n",
    "app.layout = html.Div([layout_sem_abas, layout_com_abas,layout_dropdown ])\n",
    "\n",
    "# Executando o servidor\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True, port=8051)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
